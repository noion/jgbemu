package ru.noion.jgbemu.header;

import lombok.RequiredArgsConstructor;
import lombok.ToString;

import java.util.Arrays;

@ToString
@RequiredArgsConstructor
public enum OldLicenseeCode {
    NONE((byte) 0x00, "none"),
    NINTENDO((byte) 0x01, "nintendo"),
    CAPCOM((byte) 0x08, "capcom"),
    HOT_B((byte) 0x09, "hot-b"),
    JALECO((byte) 0x0A, "jaleco"),
    COCONUTS((byte) 0x0B, "coconuts"),
    ELITESYSTEMS((byte) 0x0C, "elitesystems"),
    ELECTRONICARTS((byte) 0x13, "electronicarts"),
    HUDSONSOFT((byte) 0x18, "hudsonsoft"),
    ITCENTERTAINMENT((byte) 0x19, "itcentertainment"),
    YANOMAN((byte) 0x1A, "yanoman"),
    CLARY((byte) 0x1D, "clary"),
    VIRGIN((byte) 0x1F, "virgin"),
    PCMCOMPLETE((byte) 0x24, "pcmcomplete"),
    SAN_X((byte) 0x25, "san-x"),
    KOTOBUKISYSTEMS((byte) 0x28, "kotobukisystems"),
    SETA((byte) 0x29, "seta"),
    INFOGRAMES((byte) 0x30, "infogrames"),
    NINTENDO_1((byte) 0x31, "nintendo"),
    BANDAI((byte) 0x32, "bandai"),
    SEEABOVE((byte) 0x33, "\"seeabove\""),
    KONAMI((byte) 0x34, "konami"),
    HECTOR((byte) 0x35, "hector"),
    CAPCOM_1((byte) 0x38, "capcom"),
    BANPRESTO((byte) 0x39, "banpresto"),
    ENTERTAINMENTI((byte) 0x3C, "*entertainmenti"),
    GREMLIN((byte) 0x3E, "gremlin"),
    UBISOFT((byte) 0x41, "ubisoft"),
    ATLUS((byte) 0x42, "atlus"),
    MALIBU((byte) 0x44, "malibu"),
    ANGEL((byte) 0x46, "angel"),
    SPECTRUMHOLOBY((byte) 0x47, "spectrumholoby"),
    IREM((byte) 0x49, "irem"),
    VIRGIN_1((byte) 0x4A, "virgin"),
    MALIBU_1((byte) 0x4D, "malibu"),
    U_S_GOLD((byte) 0x4F, "u.s.gold"),
    ABSOLUTE((byte) 0x50, "absolute"),
    ACCLAIM((byte) 0x51, "acclaim"),
    ACTIVISION((byte) 0x52, "activision"),
    AMERICANSAMMY((byte) 0x53, "americansammy"),
    GAMETEK((byte) 0x54, "gametek"),
    PARKPLACE((byte) 0x55, "parkplace"),
    LJN((byte) 0x56, "ljn"),
    MATCHBOX((byte) 0x57, "matchbox"),
    MILTONBRADLEY((byte) 0x59, "miltonbradley"),
    MINDSCAPE((byte) 0x5A, "mindscape"),
    ROMSTAR((byte) 0x5B, "romstar"),
    NAXATSOFT((byte) 0x5C, "naxatsoft"),
    TRADEWEST((byte) 0x5D, "tradewest"),
    TITUS((byte) 0x60, "titus"),
    VIRGIN_2((byte) 0x61, "virgin"),
    OCEAN((byte) 0x67, "ocean"),
    ELECTRONICARTS_1((byte) 0x69, "electronicarts"),
    ELITESYSTEMS_1((byte) 0x6E, "elitesystems"),
    ELECTROBRAIN((byte) 0x6F, "electrobrain"),
    INFOGRAMES_1((byte) 0x70, "infogrames"),
    INTERPLAY((byte) 0x71, "interplay"),
    BRODERBUND((byte) 0x72, "broderbund"),
    SCULPTEREDSOFT((byte) 0x73, "sculpteredsoft"),
    THESALESCURVE((byte) 0x75, "thesalescurve"),
    T_HQ((byte) 0x78, "t*hq"),
    ACCOLADE((byte) 0x79, "accolade"),
    TRIFFIXENTERTAINMENT((byte) 0x7A, "triffixentertainment"),
    MICROPROSE((byte) 0x7C, "microprose"),
    KEMCO((byte) 0x7F, "kemco"),
    MISAWAENTERTAINMENT((byte) 0x80, "misawaentertainment"),
    LOZC((byte) 0x83, "lozc"),
    TOKUMASHOTENI((byte) 0x86, "*tokumashoteni"),
    BULLET_PROOFSOFTWARE((byte) 0x8B, "bullet-proofsoftware"),
    VICTOKAI((byte) 0x8C, "victokai"),
    APE((byte) 0x8E, "ape"),
    I_MAX((byte) 0x8F, "i'max"),
    CHUNSOFT((byte) 0x91, "chunsoft"),
    VIDEOSYSTEM((byte) 0x92, "videosystem"),
    TSUBURAVA((byte) 0x93, "tsuburava"),
    VARIE((byte) 0x95, "varie"),
    YONEZAWA_S_PAL((byte) 0x96, "yonezawa/s'pal"),
    KANEKO((byte) 0x97, "kaneko"),
    ARC((byte) 0x99, "arc"),
    NIHONBUSSAN((byte) 0x9A, "nihonbussan"),
    TECMO((byte) 0x9B, "tecmo"),
    IMAGINEER((byte) 0x9C, "imagineer"),
    BANPRESTO_1((byte) 0x9D, "banpresto"),
    NOVA((byte) 0x9F, "nova"),
    HORIELECTRIC((byte) 0xA1, "horielectric"),
    BANDAI_1((byte) 0xA2, "bandai"),
    KONAMI_2((byte) 0xA4, "konami"),
    KAWADA((byte) 0xA6, "kawada"),
    TAKARA((byte) 0xA7, "takara"),
    TECHNOSJAPAN((byte) 0xA9, "technosjapan"),
    BRODERBUND_1((byte) 0xAA, "broderbund"),
    TOEIANIMATION((byte) 0xAC, "toeianimation"),
    TOHO((byte) 0xAD, "toho"),
    NAMCO((byte) 0xAF, "namco"),
    ACCLAIM_1((byte) 0xB0, "acclaim"),
    ASCIIORNEXOFT((byte) 0xB1, "asciiornexoft"),
    BANDAI_2((byte) 0xB2, "bandai"),
    ENIX((byte) 0xB4, "enix"),
    HAL((byte) 0xB6, "hal"),
    SNK((byte) 0xB7, "snk"),
    PONYCANYON((byte) 0xB9, "ponycanyon"),
    CULTUREBRAINO((byte) 0xBA, "*culturebraino"),
    SUNSOFT((byte) 0xBB, "sunsoft"),
    SONYIMAGESOFT((byte) 0xBD, "sonyimagesoft"),
    SAMMY((byte) 0xBF, "sammy"),
    TAITO((byte) 0xC0, "taito"),
    KEMCO_1((byte) 0xC2, "kemco"),
    SQUARESOFT((byte) 0xC3, "squaresoft"),
    TOKUMASHOTENI_1((byte) 0xC4, "*tokumashoteni"),
    DATAEAST((byte) 0xC5, "dataeast"),
    TONKINHOUSE((byte) 0xC6, "tonkinhouse"),
    KOEI((byte) 0xC8, "koei"),
    UFL((byte) 0xC9, "ufl"),
    ULTRA((byte) 0xCA, "ultra"),
    VAP((byte) 0xCB, "vap"),
    USE((byte) 0xCC, "use"),
    MELDAC((byte) 0xCD, "meldac"),
    PONYCANYONOR((byte) 0xCE, "*ponycanyonor"),
    ANGEL_1((byte) 0xCF, "angel"),
    TAITO_1((byte) 0xD0, "taito"),
    SOFEL((byte) 0xD1, "sofel"),
    QUEST((byte) 0xD2, "quest"),
    SIGMAENTERPRISES((byte) 0xD3, "sigmaenterprises"),
    ASKKODANSHA((byte) 0xD4, "askkodansha"),
    NAXATSOFT_1((byte) 0xD6, "naxatsoft"),
    COPYASYSTEMS_1((byte) 0xD7, "copyasystems"),
    BANPRESTO_2((byte) 0xD9, "banpresto"),
    TOMY((byte) 0xDA, "tomy"),
    LJN_1((byte) 0xDB, "ljn"),
    NCS((byte) 0xDD, "ncs"),
    HUMAN((byte) 0xDE, "human"),
    ALTRON((byte) 0xDF, "altron"),
    JALECO_1((byte) 0xE0, "jaleco"),
    TOWACHIKI((byte) 0xE1, "towachiki"),
    UUTAKA((byte) 0xE2, "uutaka"),
    VARIE_1((byte) 0xE3, "varie"),
    EPOCH((byte) 0xE5, "epoch"),
    ATHENA((byte) 0xE7, "athena"),
    ASMIK((byte) 0xE8, "asmik"),
    NATSUME((byte) 0xE9, "natsume"),
    KINGRECORDS((byte) 0xEA, "kingrecords"),
    ATLUS_1((byte) 0xEB, "atlus"),
    EPIC_SONYRECORDS((byte) 0xEC, "epic/sonyrecords"),
    IGS((byte) 0xEE, "igs"),
    AWAVE((byte) 0xF0, "awave"),
    EXTREMEENTERTAINMENT((byte) 0xF3, "extremeentertainment"),
    LJN_2((byte) 0xFF, "ljn");

    private final byte code;
    private final String publisher;

    public static OldLicenseeCode getCode(byte code) {
        return Arrays.stream(OldLicenseeCode.values())
                .filter(oldLicenseeCode -> oldLicenseeCode.code == code)
                .findAny()
                .orElseThrow(() -> new EnumConstantNotPresentException(OldLicenseeCode.class, String.valueOf(code)));
    }
}